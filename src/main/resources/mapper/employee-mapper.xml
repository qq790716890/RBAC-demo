<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rbac_demo.dao.EmployeeMapper">




    <sql id="selectFields">
        id, user_name, password, name, status,department_id, job_title_id, create_time, create_user_id,update_time,update_user_id
    </sql>
    <sql id="insertFields">
        user_name, password, name, status,department_id, job_title_id, create_time, create_user_id,update_time,update_user_id
    </sql>

    <!-- keyProperty="id"   会在插入后，主动把自增主键即id的值，回写至 Employee 中 -->
    <insert id="insertOne" parameterType="Employee" keyProperty="id">
        INSERT into employee (<include refid="insertFields"></include>)
        values(#{userName},#{password},#{name}, #{status}, #{departmentId}, #{jobTitleId}, #{createTime}, #{createUserId}, #{updateTime}, #{updateUserId})
    </insert>

    <update id="updateOne" parameterType="Employee">
        UPDATE employee
        SET user_name = #{userName}, password = #{password},
            name=#{name}, status=#{status},department_id=#{departmentId},
            job_title_id = #{jobTitleId},
            create_time=#{createTime}, create_user_id=#{createUserId},
            update_time=#{updateTime},update_user_id=#{updateUserId}
        WHERE id = #{id}
    </update>

    <update id="updateOneStatus">
        update employee
        set status = #{status}
        where id = #{id}
    </update>


    <delete id="deleteOneById">
        DELETE FROM employee
        where id = #{id}

    </delete>


    <select id="findEmployeeById" resultType="Employee">
        select <include refid="selectFields"> </include>
        from employee
        where id = #{id}
    </select>


    <select id="findEmployeeByUserName" resultType="Employee">
        select <include refid="selectFields"> </include>
        from employee
        where user_name = #{userName}
    </select>


    <select id="selectByPage" resultType="Employee">
        select <include refid="selectFields"></include>
        from employee
        <if test="name!=null">
        where name like #{name}
        </if>
        order by create_time desc
        limit #{limit} offset #{offset}
    </select>

    <select id="selectOneById" resultType="Employee">
        select <include refid="selectFields"></include>
        from employee
        where id = #{id}
    </select>


    <select id="selectCountByDepId" resultType="Integer">
        select count(1)
        from employee
        where department_id = #{id}
    </select>

    <select id="selectCountByJobId" resultType="Integer">
        select count(1)
        from employee
        where job_title_id = #{id}
    </select>

    <select id="selectAllCount" resultType="Integer">
        select count(1)
        from employee
        <if test="name!=null">
            where name like #{name}
        </if>
        order by create_time desc, update_time desc
    </select>

</mapper>