<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.rbac_demo.dao.EmployeeMapper">

    <sql id="selectFields">
        id, user_name, password, name, status,department_id, job_title_id, create_time, create_user_id,update_time,update_user_id
    </sql>
    <sql id="insertFields">
        user_name, password , name, status,department_id, job_title_id, create_time, create_user_id,update_time,update_user_id
    </sql>

    <!-- keyProperty="id"   会在插入后，主动把自增主键即id的值，回写至 Employee 中 -->
    <insert id="insertOne" parameterType="Employee" keyProperty="id">
        INSERT into employee (<include refid="insertFields"></include>)
        values(#{userName},#{password},#{name}, #{status}, #{departmentId}, #{jobTitleId}, #{createTime}, #{createUserId}, #{updateTime}, #{updateUserId})
    </insert>

    <update id="updateOne" parameterType="Employee">
        UPDATE employee
        <set>
            <trim suffixOverrides=",">
                <if test="userName != null">user_name = #{userName},</if>
                <if test="password != null">password = #{password},</if>
                <if test="salt != null">salt = #{salt},</if>
                <if test="name != null">name = #{name},</if>
                <if test="status != null">status = #{status},</if>
                <if test="departmentId != null">department_id = #{departmentId},</if>
                <if test="jobTitleId != null">job_title_id = #{jobTitleId},</if>
                <if test="createTime != null">create_time = #{createTime},</if>
                <if test="createUserId != null">create_user_id = #{createUserId},</if>
                <if test="updateTime != null">update_time = #{updateTime},</if>
                <if test="updateUserId != null">update_user_id = #{updateUserId},</if>
            </trim>
        </set>
        WHERE id = #{id} and is_deleted = 0
    </update>

    <update id="updateOneStatus">
        update employee
        set status = #{status}
        where id = #{id}
    </update>


    <update id="updateOneByDel">
        UPDATE employee
        SET is_deleted = #{id}
        where id = #{id}
    </update>


    <select id="findEmployeeById" resultType="Employee">
        select <include refid="selectFields"> </include>
        from employee
        where id = #{id}
        AND is_deleted = 0
    </select>


    <select id="findEmployeeByUserName" resultType="Employee">
        select <include refid="selectFields"> </include>
        from employee
        where user_name = #{userName}
        AND is_deleted = 0
    </select>


    <select id="selectByPage" resultType="Employee">
        select <include refid="selectFields"></include>
        from employee
        where is_deleted = 0
        <if test="name!=null">
        and name like #{name}
        </if>
        order by create_time desc
        limit #{limit} offset #{offset}
    </select>

    <select id="selectOneById" resultType="Employee">
        select <include refid="selectFields"></include>
        from employee
        where id = #{id}
    </select>


    <select id="selectCountByDepId" resultType="Integer">
        select count(1)
        from employee
        where department_id = #{id}
        and is_deleted = 0
    </select>

    <select id="selectCountByJobId" resultType="Integer">
        select count(1)
        from employee
        where job_title_id = #{id}
        and is_deleted = 0
    </select>

    <select id="selectAllCount" resultType="Integer">
        select count(1)
        from employee
        where is_deleted = 0
        <if test="name!=null">
            and name like #{name}
        </if>
        order by create_time desc, update_time desc
    </select>


    <select id="selectOneByIdForUpdate" resultType="Employee">
        select <include refid="selectFields"></include>
        from employee
        where id = #{id}
        for update
    </select>


</mapper>